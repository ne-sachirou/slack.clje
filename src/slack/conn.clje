(ns slack.conn
  (:require gun
            jsone))

(defn child-spec [{:keys [api-token handlers name] :as args}]
  {:id (slack/conn-name name)
   :start [:slack.conn :start-link #erl((clj->erl args))]
   :restart :permanent
   :shutdown :brutal_kill
   :type :worker
   :modules '(:slack.conn)})

(defn start-link [{:keys [api-token handlers name] :as args}]
  (gen_server/start_link #erl[:local (slack/conn-name name)],
                         :slack.conn
                         args
                         #erl()))

(defn init [{:keys [api-token] :as args}]
  (let* [#erl[:ok auth-conn] (gun/open #erl"slack.com" 443)]
        (gun/get auth-conn
                 (binary/bin_to_list (str "/api/rtm.connect?"
                                          (uri_string/compose_query #erl(#erl["token" api-token])))))
        (receive*
         #erl[:gun_response
              auth-conn
              stream
              :nofin
              200
              _] (let* [#erl[:ok auth-resp-str] (loop [resp []]
                                                  (receive*
                                                   #erl[:gun_data
                                                        auth-conn
                                                        stream
                                                        :fin
                                                        data] #erl[:ok (clojure.string/join (conj resp data))]
                                                   #erl[:gun_data
                                                        auth-conn
                                                        stream
                                                        :nofin
                                                        data] (recur (conj resp data))
                                                   (after 5000 #erl[:error "Timeout"])))
                        auth-resp (jsone/decode auth-resp-str)
                        rtm-url (uri_string/parse (get auth-resp "url"))]
                       (gun/close auth-conn)
                       (let* [#erl[:ok conn] (gun/open (binary/bin_to_list (:host rtm-url)) 443)]
                             (gun/ws_upgrade conn (binary/bin_to_list (:path rtm-url)))
                             (receive*
                              #erl[:gun_upgrade
                                   conn
                                   _
                                   #erl("websocket")
                                   headers] (do (erlang/monitor :process conn)
                                                #erl[:ok (assoc args :conn conn :stream stream)])
                              #erl[:gun_response
                                   _
                                   _
                                   _
                                   status
                                   headers] #erl[:error #erl{:status status :headers headers}]
                              #erl[:gun_error _ _ reason] #erl[:error reason]
                              (after 5000 #erl[:error "Timeout"]))))
         #erl[:gun_response _ _ _ status headers] #erl[:error #erl{:status status :headers headers}]
         (after 5000 #erl[:error "Timeout"]))))

(def handle_call
  (fn* ([#erl[:send-msg msg] _ #as(state #erl{:conn conn})]
        (case* (jsone/try_encode msg)
               #erl[:ok msg-str] (do (gun/ws_send conn #erl[:text msg-str])
                                     #erl[:reply :ok state])
               #erl[:error reason] #erl[:reply #erl[:error reason] state]))
       ([_ state]
        #erl[:noreply state])))

(defn handle_cast [_ state] #erl[:norply state])

(def handle_info
  (fn* ([#erl[:DOWN _ :process _ reason], state]
        #erl[:stop reason state])
       ([#erl[:gun_ws _ _ #erl[:text msg]] #as(state #erl{:name name})]
        (gen_event/notify (slack/gen-event-name name)
                          #erl[:receive-msg (jsone/decode msg)])
        #erl[:noreply state])
       ([msg, state]
        #erl[:noreply state])))

(defn terminate [reason {conn :conn}]
  (gun/close conn)
  :ok)
