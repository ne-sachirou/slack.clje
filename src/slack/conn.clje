(ns slack.conn
  (:require [gun]
            [jsone]))

(erlang.core/behaviours gen_server)

(defn child-spec [{:keys [api-token handlers name] :as args}]
  {:id (slack/conn-name name)
   :start [:slack.conn :start-link #erl((clj->erl args))]
   :restart :permanent
   :shutdown :brutal_kill
   :type :worker
   :modules '(:slack.conn)})

(defn start-link [{:keys [api-token handlers name] :as args}]
  (gen_server/start_link #erl[:local (slack/conn-name name)],
                         :slack.conn
                         args
                         #erl()))

(defn init [{:keys [api-token] :as args}]
  (let* [#erl[:ok rtm-url] (slack.gun-util/get-rtm-url api-token)
         #erl[:ok conn] (slack.gun-util/open-rtm rtm-url)]
        #erl[:ok (assoc args :conn conn)]))

(def handle_call
  (fn* ([#erl[:send-msg msg] _ #as(state #erl{:conn conn})]
        (case* (jsone/try_encode msg)
               #erl[:ok msg-str] (do (gun/ws_send conn #erl[:text msg-str])
                                     #erl[:reply :ok state])
               #erl[:error reason] #erl[:reply #erl[:error reason] state]))
       ([_ _ state]
        #erl[:noreply state])))

(defn handle_cast [_ state] #erl[:noreply state])

(def handle_info
  (fn* ([#erl[:DOWN _ :process _ reason] state]
        #erl[:stop reason state])
       ([#erl[:gun_ws _ _ #erl[:text msg]] #as(state #erl{:name name})]
        (gen_event/notify (slack/gen-event-name name)
                          #erl[:receive-msg (jsone/decode msg)])
        #erl[:noreply state])
       ([msg, state]
        #erl[:noreply state])))

(defn terminate [_reason {conn :conn}]
  (gun/close conn)
  :ok)
