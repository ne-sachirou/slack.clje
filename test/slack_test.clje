(ns slack-test
  (:require
    [clojure.test :refer [deftest is testing]]
    [slack]))


(deftest conn-name-test
  (testing "Generate a slack/conn gen_server name."
    (is (= :slack.conn.example (slack/conn-name "example")))))


(deftest gen-event-name-test
  (testing "Generate a gen_event name."
    (is (= :slack.gen_event.example (slack/gen-event-name "example")))))


(deftest gen-event-sup-name-test
  (testing "Generate a slack/gen-event-sup gen_server name."
    (is (= :slack.gen-event-sup.example (slack/gen-event-sup-name "example")))))


(deftest sup-name-test
  (testing "Generate a slack/sup supervisor name."
    (is (= :slack.sup.example (slack/sup-name "example")))))


;; NOTE: meck can't mock gen_server because meck itself use it.
(deftest send-msg-test
  (testing "Send a message to slack.conn."
    (try
      (slack/send-msg "example" #erl{:type "ping"})
      (is false)
      (catch :exit error
        (is (= #erl[:noproc
                    #erl[:gen_server :call #erl(:slack.conn.example #erl[:send-msg #erl{:type "ping"}])]]
               error))))))


;; (deftest send-msg-test
;;   (testing "Send a message to slack.conn."
;;     (try
;;       (meck/new :gen_server #erl(:passthrough :unstick))
;;       (meck/expect :gen_server
;;                    :call
;;                    (fn* ([:slack.conn.example #erl{:type "ping"}] :ok)))
;;       (is (= :ok (slack/send-msg "example" #erl{:type "ping"})))
;;       (meck/validate :gen_server)
;;       (finally (meck/unload :gen_server)))))
